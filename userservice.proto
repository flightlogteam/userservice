syntax = "proto3";

enum PrivacyLevel {
  PUBLIC = 0;
  PROTECTED = 1;
  PRIVATE = 2;
}

package usergrpc;
option go_package="grpc/userservice";

message ActivateUserRequest {
  string userId = 1;
}

message UserByIdRequest {
  string userId = 1;
}

message UserByIdResponse {
  string userId = 1;
  PrivacyLevel privacyLevel = 2;
  bool active = 3;
}

message ActivateUserResponse {
  bool status = 1;
  string error = 2;
}

message LoginRequest {
  string password = 1;
  oneof userCredential {
    string username = 2;
    string email = 3;
  }
}

message LoginResponse {
  enum LoginStatus {
    SUCCESS = 0;
    INVALID_CREDENTIALS = 1;
    NOT_ACTIVATED = 2;
  }
  LoginStatus status = 1;
  string userId = 2;
  string role = 3;
}

message CreateUserRequest {
  string id = 1;
  string username = 2;
  string email = 3;
  string firstname = 4;
  string lastname = 5;
  enum PrivacyLevel {
    PUBLIC = 0;
    PROTECTED = 1;
    PRIVATE = 2;
  }
  PrivacyLevel level = 6;
}

message CreateUserResponse {
  enum CreationStatus {
    SUCCESS = 0;
    EMAIL_EXISTS = 1;
    USERNAME_EXISTS = 2;
    INVALID_DATA = 3;
  }
  CreationStatus status = 1;
  string errorMessage = 2;
}

message FlyingDeviceExsistsRequest {
  string deviceId = 1;
}

message FlyingDeviceExsistsResponse {
  bool exsists = 1;
}



service UserService {
  rpc ActivateUser(ActivateUserRequest) returns (ActivateUserResponse) {}
  rpc LoginUser(LoginRequest) returns (LoginResponse) {}
  rpc RegisterUser(CreateUserRequest) returns (CreateUserResponse) {}
  rpc UserByUserId(UserByIdRequest) returns (UserByIdResponse) {}
  rpc FlyingDeviceExsists(FlyingDeviceExsistsRequest) returns (FlyingDeviceExsistsResponse) {}
}
